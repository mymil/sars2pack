% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/align_to_baseline.R
\name{align_to_baseline}
\alias{align_to_baseline}
\title{Align case tracking locations (for example) to a common baseline}
\usage{
align_to_baseline(df, filter_criteria, date_column = "date", group_vars)
}
\arguments{
\item{df}{data.frame that includes a date column and at least one other column
for filtering, typically a case count.}

\item{filter_criteria}{an expression as would normally be specified
directly to \code{dplyr::filter()}.}

\item{date_column}{character(1) column name of the column for ordering
the data to define a "beginning" of the curve. It is called a
"date column", but anything with a natural ordering will likely work.}

\item{group_vars}{optional character() column_name(s) that specify
grouping done before calculating minimum \code{date}s. Concretely,
if the goal is to compare several countries, then the group_vars='country'
with a column in \code{df} called \code{country}.}
}
\value{
A data.frame with a new column, \code{index}, that gives the
number of time intervals (typically days) from when the
baseline counts are first encountered, done by group.
}
\description{
When endeavoring to compare epidemic curves (cases vs date, for
example), particularly when making graphical displays, it is helpful
to set a "time baseline" that aligns where all the curves start.
}
\details{
This function takes this basic approach:
\enumerate{
\item Filter all all data using the \code{filter_criteria}, expressed as a
\code{dplyr::filter()} expression.
\item Optionally group the dataset.
\item Find the minimum date left after applying the filter criteria
\item "Subtract" the minimum date (on a per group basis if grouping
columns are used).
}

The result is a plot that shifts all the curves to start at the "same"
starting time with respect to the "start" of the pandemic. For example,
for the COVID-19 pandemic, China started much earlier than the rest of
the world. To compare the time course of China versus other countries,
setting the time to the point where each country had 100 cases allows
direct comparison of the shapes of the countries' curves.
}
\examples{
library(dplyr)
library(ggplot2)

# use European CDC dataset
ecdc = ecdc_data()
head(ecdc)
dplyr::glimpse(ecdc)

# get top 10 countries by cumulative
# number of deaths
top_10 = ecdc \%>\%
    filter(subset=='deaths') \%>\%
    dplyr::group_by(location_name) \%>\%
    dplyr::summarize(count = max(count)) \%>\%
    dplyr::arrange(dplyr::desc(count)) \%>\%
    head(10)

top_10

# limit ecdc data to "deaths" and
# top 10 countries

ecdc_top10 = ecdc \%>\%
    dplyr::filter(subset=='deaths' & location_name \%in\% top_10[['location_name']])
plot_epicurve(ecdc_top10, color='location_name')

ecdc_top10_baseline = align_to_baseline(ecdc_top10, count>100, group_vars='location_name')

plot_epicurve(ecdc_top10_baseline, date_column='index', color='location_name') +
    ggtitle('Deaths over time, aligned to date of 100 deaths per country') 

}
\seealso{
Other case-tracking: 
\code{\link{beoutbreakprepared_data}()},
\code{\link{covidtracker_data}()},
\code{\link{ecdc_data}()},
\code{\link{eu_data_cache_data}()},
\code{\link{jhu_data}()},
\code{\link{nytimes_county_data}()},
\code{\link{plot_epicurve}()},
\code{\link{usa_facts_data}()}

Other plotting: 
\code{\link{plot_epicurve}()},
\code{\link{plot_projection}()}
}
\author{
Sean Davis \href{mailto:seandavi@gmail.com}{seandavi@gmail.com}
}
\concept{case-tracking}
\concept{plotting}
